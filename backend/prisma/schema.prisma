// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  first_name        String?
  last_name         String?
  email            String    @unique
  password_hash     String
  is_active         Boolean   @default(true)
  is_admin          Boolean   @default(false)
  last_login_at      DateTime?
  monitors         Monitor[]
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  @@map("users")
}

model Monitor {
  id            Int      @id @default(autoincrement())
  url           String
  interval      Int      @default(5) // minutes
  last_status    String?  // e.g., "200", "DOWN"
  last_checked_at DateTime?
  is_active      Boolean  @default(true)
  user          User     @relation(fields: [user_id], references: [id])
  user_id        Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  
  // Relations
  checks        MonitorCheck[]
  incidents     Incident[]

  @@map("monitors")
}

model MonitorCheck {
  id            Int      @id @default(autoincrement())
  monitor_id     Int
  status        String   // "UP", "DOWN", "TIMEOUT", "ERROR"
  statusCode    Int?     // HTTP status code
  responseTime  Int?     // Response time in milliseconds
  errorMessage  String?  // Error message if check failed
  checked_at     DateTime @default(now())
  
  // Relations
  monitor       Monitor  @relation(fields: [monitor_id], references: [id], onDelete: Cascade)

  @@map("monitor_checks")
}

model Incident {
  id            Int      @id @default(autoincrement())
  monitor_id     Int
  status        String   // "DOWN", "UP" (when incident is resolved)
  started_at     DateTime @default(now())
  ended_at       DateTime?
  duration      Int?     // Duration in minutes
  description   String?  // Incident description
  
  // Relations
  monitor       Monitor  @relation(fields: [monitor_id], references: [id], onDelete: Cascade)

  @@map("incidents")
}
